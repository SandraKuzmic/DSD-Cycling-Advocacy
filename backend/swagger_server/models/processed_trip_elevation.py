# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProcessedTripElevation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, max_elevation: float=None, min_elevation: float=None, avg_elevation: float=None):  # noqa: E501
        """ProcessedTripElevation - a model defined in Swagger

        :param max_elevation: The max_elevation of this ProcessedTripElevation.  # noqa: E501
        :type max_elevation: float
        :param min_elevation: The min_elevation of this ProcessedTripElevation.  # noqa: E501
        :type min_elevation: float
        :param avg_elevation: The avg_elevation of this ProcessedTripElevation.  # noqa: E501
        :type avg_elevation: float
        """
        self.swagger_types = {
            'max_elevation': float,
            'min_elevation': float,
            'avg_elevation': float
        }

        self.attribute_map = {
            'max_elevation': 'maxElevation',
            'min_elevation': 'minElevation',
            'avg_elevation': 'avgElevation'
        }
        self._max_elevation = max_elevation
        self._min_elevation = min_elevation
        self._avg_elevation = avg_elevation

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessedTripElevation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessedTrip_elevation of this ProcessedTripElevation.  # noqa: E501
        :rtype: ProcessedTripElevation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_elevation(self) -> float:
        """Gets the max_elevation of this ProcessedTripElevation.

        Expressed in meters  # noqa: E501

        :return: The max_elevation of this ProcessedTripElevation.
        :rtype: float
        """
        return self._max_elevation

    @max_elevation.setter
    def max_elevation(self, max_elevation: float):
        """Sets the max_elevation of this ProcessedTripElevation.

        Expressed in meters  # noqa: E501

        :param max_elevation: The max_elevation of this ProcessedTripElevation.
        :type max_elevation: float
        """

        self._max_elevation = max_elevation

    @property
    def min_elevation(self) -> float:
        """Gets the min_elevation of this ProcessedTripElevation.

        Expressed in meters  # noqa: E501

        :return: The min_elevation of this ProcessedTripElevation.
        :rtype: float
        """
        return self._min_elevation

    @min_elevation.setter
    def min_elevation(self, min_elevation: float):
        """Sets the min_elevation of this ProcessedTripElevation.

        Expressed in meters  # noqa: E501

        :param min_elevation: The min_elevation of this ProcessedTripElevation.
        :type min_elevation: float
        """

        self._min_elevation = min_elevation

    @property
    def avg_elevation(self) -> float:
        """Gets the avg_elevation of this ProcessedTripElevation.

        Expressed in meters  # noqa: E501

        :return: The avg_elevation of this ProcessedTripElevation.
        :rtype: float
        """
        return self._avg_elevation

    @avg_elevation.setter
    def avg_elevation(self, avg_elevation: float):
        """Sets the avg_elevation of this ProcessedTripElevation.

        Expressed in meters  # noqa: E501

        :param avg_elevation: The avg_elevation of this ProcessedTripElevation.
        :type avg_elevation: float
        """

        self._avg_elevation = avg_elevation
