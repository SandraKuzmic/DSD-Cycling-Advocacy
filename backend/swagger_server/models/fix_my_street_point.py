# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FixMyStreetPoint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, point_uuid: str=None, lat: float=None, lon: float=None, fix_my_street_url: str=None):  # noqa: E501
        """FixMyStreetPoint - a model defined in Swagger

        :param point_uuid: The point_uuid of this FixMyStreetPoint.  # noqa: E501
        :type point_uuid: str
        :param lat: The lat of this FixMyStreetPoint.  # noqa: E501
        :type lat: float
        :param lon: The lon of this FixMyStreetPoint.  # noqa: E501
        :type lon: float
        :param fix_my_street_url: The fix_my_street_url of this FixMyStreetPoint.  # noqa: E501
        :type fix_my_street_url: str
        """
        self.swagger_types = {
            'point_uuid': str,
            'lat': float,
            'lon': float,
            'fix_my_street_url': str
        }

        self.attribute_map = {
            'point_uuid': 'pointUUID',
            'lat': 'lat',
            'lon': 'lon',
            'fix_my_street_url': 'fixMyStreetUrl'
        }
        self._point_uuid = point_uuid
        self._lat = lat
        self._lon = lon
        self._fix_my_street_url = fix_my_street_url

    @classmethod
    def from_dict(cls, dikt) -> 'FixMyStreetPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FixMyStreetPoint of this FixMyStreetPoint.  # noqa: E501
        :rtype: FixMyStreetPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def point_uuid(self) -> str:
        """Gets the point_uuid of this FixMyStreetPoint.


        :return: The point_uuid of this FixMyStreetPoint.
        :rtype: str
        """
        return self._point_uuid

    @point_uuid.setter
    def point_uuid(self, point_uuid: str):
        """Sets the point_uuid of this FixMyStreetPoint.


        :param point_uuid: The point_uuid of this FixMyStreetPoint.
        :type point_uuid: str
        """

        self._point_uuid = point_uuid

    @property
    def lat(self) -> float:
        """Gets the lat of this FixMyStreetPoint.


        :return: The lat of this FixMyStreetPoint.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this FixMyStreetPoint.


        :param lat: The lat of this FixMyStreetPoint.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this FixMyStreetPoint.


        :return: The lon of this FixMyStreetPoint.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this FixMyStreetPoint.


        :param lon: The lon of this FixMyStreetPoint.
        :type lon: float
        """

        self._lon = lon

    @property
    def fix_my_street_url(self) -> str:
        """Gets the fix_my_street_url of this FixMyStreetPoint.


        :return: The fix_my_street_url of this FixMyStreetPoint.
        :rtype: str
        """
        return self._fix_my_street_url

    @fix_my_street_url.setter
    def fix_my_street_url(self, fix_my_street_url: str):
        """Sets the fix_my_street_url of this FixMyStreetPoint.


        :param fix_my_street_url: The fix_my_street_url of this FixMyStreetPoint.
        :type fix_my_street_url: str
        """

        self._fix_my_street_url = fix_my_street_url
