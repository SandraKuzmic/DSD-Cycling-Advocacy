# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.path_segments import PathSegments  # noqa: F401,E501
from swagger_server import util


class Path(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, path_uuid: str=None, segments: List[PathSegments]=None):  # noqa: E501
        """Path - a model defined in Swagger

        :param path_uuid: The path_uuid of this Path.  # noqa: E501
        :type path_uuid: str
        :param segments: The segments of this Path.  # noqa: E501
        :type segments: List[PathSegments]
        """
        self.swagger_types = {
            'path_uuid': str,
            'segments': List[PathSegments]
        }

        self.attribute_map = {
            'path_uuid': 'pathUUID',
            'segments': 'segments'
        }
        self._path_uuid = path_uuid
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt) -> 'Path':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Path of this Path.  # noqa: E501
        :rtype: Path
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_uuid(self) -> str:
        """Gets the path_uuid of this Path.


        :return: The path_uuid of this Path.
        :rtype: str
        """
        return self._path_uuid

    @path_uuid.setter
    def path_uuid(self, path_uuid: str):
        """Sets the path_uuid of this Path.


        :param path_uuid: The path_uuid of this Path.
        :type path_uuid: str
        """

        self._path_uuid = path_uuid

    @property
    def segments(self) -> List[PathSegments]:
        """Gets the segments of this Path.


        :return: The segments of this Path.
        :rtype: List[PathSegments]
        """
        return self._segments

    @segments.setter
    def segments(self, segments: List[PathSegments]):
        """Sets the segments of this Path.


        :param segments: The segments of this Path.
        :type segments: List[PathSegments]
        """

        self._segments = segments
