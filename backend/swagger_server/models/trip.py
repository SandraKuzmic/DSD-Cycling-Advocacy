# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.trip_gnss_data import TripGnssData  # noqa: F401,E501
from swagger_server import util


class Trip(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_uuid: str=None, trip_uuid: str=None, start_ts: datetime=None, end_ts: datetime=None, distance: float=None, gnss_data: List[TripGnssData]=None):  # noqa: E501
        """Trip - a model defined in Swagger

        :param device_uuid: The device_uuid of this Trip.  # noqa: E501
        :type device_uuid: str
        :param trip_uuid: The trip_uuid of this Trip.  # noqa: E501
        :type trip_uuid: str
        :param start_ts: The start_ts of this Trip.  # noqa: E501
        :type start_ts: datetime
        :param end_ts: The end_ts of this Trip.  # noqa: E501
        :type end_ts: datetime
        :param distance: The distance of this Trip.  # noqa: E501
        :type distance: float
        :param gnss_data: The gnss_data of this Trip.  # noqa: E501
        :type gnss_data: List[TripGnssData]
        """
        self.swagger_types = {
            'device_uuid': str,
            'trip_uuid': str,
            'start_ts': datetime,
            'end_ts': datetime,
            'distance': float,
            'gnss_data': List[TripGnssData]
        }

        self.attribute_map = {
            'device_uuid': 'deviceUUID',
            'trip_uuid': 'tripUUID',
            'start_ts': 'startTS',
            'end_ts': 'endTS',
            'distance': 'distance',
            'gnss_data': 'gnssData'
        }
        self._device_uuid = device_uuid
        self._trip_uuid = trip_uuid
        self._start_ts = start_ts
        self._end_ts = end_ts
        self._distance = distance
        self._gnss_data = gnss_data

    @classmethod
    def from_dict(cls, dikt) -> 'Trip':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Trip of this Trip.  # noqa: E501
        :rtype: Trip
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_uuid(self) -> str:
        """Gets the device_uuid of this Trip.


        :return: The device_uuid of this Trip.
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid: str):
        """Sets the device_uuid of this Trip.


        :param device_uuid: The device_uuid of this Trip.
        :type device_uuid: str
        """

        self._device_uuid = device_uuid

    @property
    def trip_uuid(self) -> str:
        """Gets the trip_uuid of this Trip.


        :return: The trip_uuid of this Trip.
        :rtype: str
        """
        return self._trip_uuid

    @trip_uuid.setter
    def trip_uuid(self, trip_uuid: str):
        """Sets the trip_uuid of this Trip.


        :param trip_uuid: The trip_uuid of this Trip.
        :type trip_uuid: str
        """

        self._trip_uuid = trip_uuid

    @property
    def start_ts(self) -> datetime:
        """Gets the start_ts of this Trip.


        :return: The start_ts of this Trip.
        :rtype: datetime
        """
        return self._start_ts

    @start_ts.setter
    def start_ts(self, start_ts: datetime):
        """Sets the start_ts of this Trip.


        :param start_ts: The start_ts of this Trip.
        :type start_ts: datetime
        """

        self._start_ts = start_ts

    @property
    def end_ts(self) -> datetime:
        """Gets the end_ts of this Trip.


        :return: The end_ts of this Trip.
        :rtype: datetime
        """
        return self._end_ts

    @end_ts.setter
    def end_ts(self, end_ts: datetime):
        """Sets the end_ts of this Trip.


        :param end_ts: The end_ts of this Trip.
        :type end_ts: datetime
        """

        self._end_ts = end_ts

    @property
    def distance(self) -> float:
        """Gets the distance of this Trip.


        :return: The distance of this Trip.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this Trip.


        :param distance: The distance of this Trip.
        :type distance: float
        """

        self._distance = distance

    @property
    def gnss_data(self) -> List[TripGnssData]:
        """Gets the gnss_data of this Trip.


        :return: The gnss_data of this Trip.
        :rtype: List[TripGnssData]
        """
        return self._gnss_data

    @gnss_data.setter
    def gnss_data(self, gnss_data: List[TripGnssData]):
        """Sets the gnss_data of this Trip.


        :param gnss_data: The gnss_data of this Trip.
        :type gnss_data: List[TripGnssData]
        """

        self._gnss_data = gnss_data
