# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TripGnssData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, time_ts: datetime=None, lat: float=None, lon: float=None, precision: float=None, ele: float=None, speed: float=None):  # noqa: E501
        """TripGnssData - a model defined in Swagger

        :param time_ts: The time_ts of this TripGnssData.  # noqa: E501
        :type time_ts: datetime
        :param lat: The lat of this TripGnssData.  # noqa: E501
        :type lat: float
        :param lon: The lon of this TripGnssData.  # noqa: E501
        :type lon: float
        :param precision: The precision of this TripGnssData.  # noqa: E501
        :type precision: float
        :param ele: The ele of this TripGnssData.  # noqa: E501
        :type ele: float
        :param speed: The speed of this TripGnssData.  # noqa: E501
        :type speed: float
        """
        self.swagger_types = {
            'time_ts': datetime,
            'lat': float,
            'lon': float,
            'precision': float,
            'ele': float,
            'speed': float
        }

        self.attribute_map = {
            'time_ts': 'timeTS',
            'lat': 'lat',
            'lon': 'lon',
            'precision': 'precision',
            'ele': 'ele',
            'speed': 'speed'
        }
        self._time_ts = time_ts
        self._lat = lat
        self._lon = lon
        self._precision = precision
        self._ele = ele
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt) -> 'TripGnssData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Trip_gnssData of this TripGnssData.  # noqa: E501
        :rtype: TripGnssData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_ts(self) -> datetime:
        """Gets the time_ts of this TripGnssData.


        :return: The time_ts of this TripGnssData.
        :rtype: datetime
        """
        return self._time_ts

    @time_ts.setter
    def time_ts(self, time_ts: datetime):
        """Sets the time_ts of this TripGnssData.


        :param time_ts: The time_ts of this TripGnssData.
        :type time_ts: datetime
        """

        self._time_ts = time_ts

    @property
    def lat(self) -> float:
        """Gets the lat of this TripGnssData.


        :return: The lat of this TripGnssData.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this TripGnssData.


        :param lat: The lat of this TripGnssData.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this TripGnssData.


        :return: The lon of this TripGnssData.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this TripGnssData.


        :param lon: The lon of this TripGnssData.
        :type lon: float
        """

        self._lon = lon

    @property
    def precision(self) -> float:
        """Gets the precision of this TripGnssData.

        Expressed in meters  # noqa: E501

        :return: The precision of this TripGnssData.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision: float):
        """Sets the precision of this TripGnssData.

        Expressed in meters  # noqa: E501

        :param precision: The precision of this TripGnssData.
        :type precision: float
        """

        self._precision = precision

    @property
    def ele(self) -> float:
        """Gets the ele of this TripGnssData.

        Expressed in meters  # noqa: E501

        :return: The ele of this TripGnssData.
        :rtype: float
        """
        return self._ele

    @ele.setter
    def ele(self, ele: float):
        """Sets the ele of this TripGnssData.

        Expressed in meters  # noqa: E501

        :param ele: The ele of this TripGnssData.
        :type ele: float
        """

        self._ele = ele

    @property
    def speed(self) -> float:
        """Gets the speed of this TripGnssData.

        Expressed in meters per second  # noqa: E501

        :return: The speed of this TripGnssData.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed: float):
        """Sets the speed of this TripGnssData.

        Expressed in meters per second  # noqa: E501

        :param speed: The speed of this TripGnssData.
        :type speed: float
        """

        self._speed = speed
